{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nconst initialState = {\n  items: localStorage.getItem(\"carts\") ? JSON.parse(localStorage.getItem(\"carts\")) : [],\n  statusTab: false,\n  totalSum: localStorage.getItem(\"totalSum\") ? JSON.parse(localStorage.getItem(\"totalSum\")) : 0\n};\nconst cartSlice = createSlice({\n  name: 'cart',\n  initialState,\n  reducers: {\n    addToCart(state, action) {\n      const {\n        productId,\n        quantity\n      } = action.payload;\n      const indexProductId = state.items.findIndex(item => item.productId === productId);\n      if (indexProductId >= 0) {\n        state.items[indexProductId].quantity += quantity;\n      } else {\n        state.items.push({\n          productId,\n          quantity\n        });\n      }\n      localStorage.setItem(\"carts\", JSON.stringify(state.items));\n      // state.totalSum += state.items[indexProductId].price*state.items[indexProductId].quantity;\n      // localStorage.setItem(\"totalSum\", JSON.stringify(state.totalSum));\n      console.log(\"Total: \", state.totalSum, state.items[indexProductId].productId);\n    },\n    changeQuantity(state, action) {\n      const {\n        productId,\n        quantity\n      } = action.payload;\n      const indexProductId = state.items.findIndex(item => item.productId === productId);\n      if (quantity > 0) {\n        state.items[indexProductId].quantity = quantity;\n      } else {\n        state.items = state.items.filter(item => item.productId !== productId);\n      }\n      localStorage.setItem(\"carts\", JSON.stringify(state.items));\n      console.log(\"Change quantity\", quantity);\n    }\n    // changeTotal(state, action){\n    //     const {productId, quantity} = action.payload;\n    //     const indexProductId = (state.items).findIndex(item => item.productId === productId);\n\n    //     if(quantity > 0){\n    //         state.items[indexProductId].quantity = quantity;\n    //     }else{\n    //         state.items = (state.items).filter(item => item.productId !== productId);\n    //     }\n    //     localStorage.setItem(\"carts\", JSON.stringify(state.items));\n    //     console.log(\"Change quantity\", quantity)\n\n    //     let totalSum = 0;\n    //     for (const product in items){\n    //         totalSum += product.price*product.quantity;\n    //     }\n    //     localStorage.setItem(\"carts\", JSON.stringify(state.items));\n\n    //     console.log(totalSum);\n    //     return totalSum;\n    // }\n  }\n});\nexport const {\n  addToCart,\n  changeQuantity\n} = cartSlice.actions;\nexport default cartSlice.reducer;","map":{"version":3,"names":["createSlice","initialState","items","localStorage","getItem","JSON","parse","statusTab","totalSum","cartSlice","name","reducers","addToCart","state","action","productId","quantity","payload","indexProductId","findIndex","item","push","setItem","stringify","console","log","changeQuantity","filter","actions","reducer"],"sources":["C:/Users/afala/Desktop/Универ/Тестовые задания/Neoflex/online-shop/online-shop-2/src/stores/cart.js"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\n\nconst initialState = {\n    items: localStorage.getItem(\"carts\") ? JSON.parse(localStorage.getItem(\"carts\")) : [],\n    statusTab: false,\n    totalSum: localStorage.getItem(\"totalSum\") ? JSON.parse(localStorage.getItem(\"totalSum\")) : 0\n}\nconst cartSlice = createSlice({\n    name: 'cart',\n    initialState,\n    reducers: {\n        addToCart(state, action){\n            const {productId, quantity} = action.payload;\n            const indexProductId = (state.items).findIndex(item => item.productId === productId);\n            if(indexProductId >= 0){\n                state.items[indexProductId].quantity += quantity;\n            }else{\n                state.items.push({productId, quantity});\n            }\n            localStorage.setItem(\"carts\", JSON.stringify(state.items));\n            // state.totalSum += state.items[indexProductId].price*state.items[indexProductId].quantity;\n            // localStorage.setItem(\"totalSum\", JSON.stringify(state.totalSum));\n            console.log(\"Total: \", state.totalSum, state.items[indexProductId].productId)\n        },\n        changeQuantity(state, action){\n            const {productId, quantity} = action.payload;\n            const indexProductId = (state.items).findIndex(item => item.productId === productId);\n\n            if(quantity > 0){\n                state.items[indexProductId].quantity = quantity;\n            }else{\n                state.items = (state.items).filter(item => item.productId !== productId);\n            }\n            localStorage.setItem(\"carts\", JSON.stringify(state.items));\n            console.log(\"Change quantity\", quantity)\n        },\n        // changeTotal(state, action){\n        //     const {productId, quantity} = action.payload;\n        //     const indexProductId = (state.items).findIndex(item => item.productId === productId);\n\n        //     if(quantity > 0){\n        //         state.items[indexProductId].quantity = quantity;\n        //     }else{\n        //         state.items = (state.items).filter(item => item.productId !== productId);\n        //     }\n        //     localStorage.setItem(\"carts\", JSON.stringify(state.items));\n        //     console.log(\"Change quantity\", quantity)\n\n\n        //     let totalSum = 0;\n        //     for (const product in items){\n        //         totalSum += product.price*product.quantity;\n        //     }\n        //     localStorage.setItem(\"carts\", JSON.stringify(state.items));\n\n        //     console.log(totalSum);\n        //     return totalSum;\n        // }\n    }\n})\nexport const { addToCart, changeQuantity } = cartSlice.actions;\nexport default cartSlice.reducer;"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAE9C,MAAMC,YAAY,GAAG;EACjBC,KAAK,EAAEC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,GAAGC,IAAI,CAACC,KAAK,CAACH,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,CAAC,GAAG,EAAE;EACrFG,SAAS,EAAE,KAAK;EAChBC,QAAQ,EAAEL,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC,GAAGC,IAAI,CAACC,KAAK,CAACH,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC,CAAC,GAAG;AAChG,CAAC;AACD,MAAMK,SAAS,GAAGT,WAAW,CAAC;EAC1BU,IAAI,EAAE,MAAM;EACZT,YAAY;EACZU,QAAQ,EAAE;IACNC,SAASA,CAACC,KAAK,EAAEC,MAAM,EAAC;MACpB,MAAM;QAACC,SAAS;QAAEC;MAAQ,CAAC,GAAGF,MAAM,CAACG,OAAO;MAC5C,MAAMC,cAAc,GAAIL,KAAK,CAACX,KAAK,CAAEiB,SAAS,CAACC,IAAI,IAAIA,IAAI,CAACL,SAAS,KAAKA,SAAS,CAAC;MACpF,IAAGG,cAAc,IAAI,CAAC,EAAC;QACnBL,KAAK,CAACX,KAAK,CAACgB,cAAc,CAAC,CAACF,QAAQ,IAAIA,QAAQ;MACpD,CAAC,MAAI;QACDH,KAAK,CAACX,KAAK,CAACmB,IAAI,CAAC;UAACN,SAAS;UAAEC;QAAQ,CAAC,CAAC;MAC3C;MACAb,YAAY,CAACmB,OAAO,CAAC,OAAO,EAAEjB,IAAI,CAACkB,SAAS,CAACV,KAAK,CAACX,KAAK,CAAC,CAAC;MAC1D;MACA;MACAsB,OAAO,CAACC,GAAG,CAAC,SAAS,EAAEZ,KAAK,CAACL,QAAQ,EAAEK,KAAK,CAACX,KAAK,CAACgB,cAAc,CAAC,CAACH,SAAS,CAAC;IACjF,CAAC;IACDW,cAAcA,CAACb,KAAK,EAAEC,MAAM,EAAC;MACzB,MAAM;QAACC,SAAS;QAAEC;MAAQ,CAAC,GAAGF,MAAM,CAACG,OAAO;MAC5C,MAAMC,cAAc,GAAIL,KAAK,CAACX,KAAK,CAAEiB,SAAS,CAACC,IAAI,IAAIA,IAAI,CAACL,SAAS,KAAKA,SAAS,CAAC;MAEpF,IAAGC,QAAQ,GAAG,CAAC,EAAC;QACZH,KAAK,CAACX,KAAK,CAACgB,cAAc,CAAC,CAACF,QAAQ,GAAGA,QAAQ;MACnD,CAAC,MAAI;QACDH,KAAK,CAACX,KAAK,GAAIW,KAAK,CAACX,KAAK,CAAEyB,MAAM,CAACP,IAAI,IAAIA,IAAI,CAACL,SAAS,KAAKA,SAAS,CAAC;MAC5E;MACAZ,YAAY,CAACmB,OAAO,CAAC,OAAO,EAAEjB,IAAI,CAACkB,SAAS,CAACV,KAAK,CAACX,KAAK,CAAC,CAAC;MAC1DsB,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAET,QAAQ,CAAC;IAC5C;IACA;IACA;IACA;;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;;IAGA;IACA;IACA;IACA;IACA;;IAEA;IACA;IACA;EACJ;AACJ,CAAC,CAAC;AACF,OAAO,MAAM;EAAEJ,SAAS;EAAEc;AAAe,CAAC,GAAGjB,SAAS,CAACmB,OAAO;AAC9D,eAAenB,SAAS,CAACoB,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}