{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nconst initialState = {\n  items: localStorage.getItem(\"carts\") ? JSON.parse(localStorage.getItem(\"carts\")) : [],\n  statusTab: false\n};\nconst cartSlice = createSlice({\n  name: 'cart',\n  initialState,\n  reducers: {\n    addToCart(state, action) {\n      const {\n        productId,\n        quantity\n      } = action.payload;\n      const indexProductId = state.items.findIndex(item => item.productId === productId);\n      if (indexProductId >= 0) {\n        state.items[indexProductId].quantity += quantity;\n      } else {\n        state.items.push({\n          productId,\n          quantity\n        });\n      }\n      localStorage.setItem(\"carts\", JSON.stringify(state.items));\n    },\n    changeQuantity(state, action) {\n      const {\n        productId,\n        quantity\n      } = action.payload;\n      const indexProductId = state.items.findIndex(item => item.productId === productId);\n      if (quantity > 0) {\n        state.items[indexProductId].quantity = quantity;\n      } else {\n        state.items = state.items.filter(item => item.productId !== productId);\n      }\n      localStorage.setItem(\"carts\", JSON.stringify(state.items));\n    },\n    changeTotal(state, action) {\n      const products = action.payload;\n      let indexProductId;\n      let totalSum = 0;\n      for (const product in products) {\n        indexProductId = state.items.findIndex(item => item.productId === product.id);\n        totalSum += product.price * state.items[indexProductId].quantity;\n      }\n      console.log(totalSum);\n      return totalSum;\n    }\n  }\n});\nexport const {\n  addToCart,\n  changeQuantity\n} = cartSlice.actions;\nexport default cartSlice.reducer;","map":{"version":3,"names":["createSlice","initialState","items","localStorage","getItem","JSON","parse","statusTab","cartSlice","name","reducers","addToCart","state","action","productId","quantity","payload","indexProductId","findIndex","item","push","setItem","stringify","changeQuantity","filter","changeTotal","products","totalSum","product","id","price","console","log","actions","reducer"],"sources":["C:/Users/afala/Desktop/Универ/Тестовые задания/Neoflex/online-shop/online-shop-2/src/stores/cart.js"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\n\nconst initialState = {\n    items: localStorage.getItem(\"carts\") ? JSON.parse(localStorage.getItem(\"carts\")) : [],\n    statusTab: false\n}\nconst cartSlice = createSlice({\n    name: 'cart',\n    initialState,\n    reducers: {\n        addToCart(state, action){\n            const {productId, quantity} = action.payload;\n            const indexProductId = (state.items).findIndex(item => item.productId === productId);\n            if(indexProductId >= 0){\n                state.items[indexProductId].quantity += quantity;\n            }else{\n                state.items.push({productId, quantity});\n            }\n            localStorage.setItem(\"carts\", JSON.stringify(state.items));\n            \n        },\n        changeQuantity(state, action){\n            const {productId, quantity} = action.payload;\n            const indexProductId = (state.items).findIndex(item => item.productId === productId);\n\n            if(quantity > 0){\n                state.items[indexProductId].quantity = quantity;\n            }else{\n                state.items = (state.items).filter(item => item.productId !== productId);\n            }\n            localStorage.setItem(\"carts\", JSON.stringify(state.items));\n        },\n        changeTotal(state, action){\n            const products = action.payload;\n            let indexProductId;\n            let totalSum = 0;\n            for (const product in products){\n                indexProductId = (state.items).findIndex(item => item.productId === product.id);\n                totalSum += product.price*state.items[indexProductId].quantity;\n            }\n            console.log(totalSum);\n            return totalSum;\n        }\n    }\n})\nexport const { addToCart, changeQuantity } = cartSlice.actions;\nexport default cartSlice.reducer;"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAE9C,MAAMC,YAAY,GAAG;EACjBC,KAAK,EAAEC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,GAAGC,IAAI,CAACC,KAAK,CAACH,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,CAAC,GAAG,EAAE;EACrFG,SAAS,EAAE;AACf,CAAC;AACD,MAAMC,SAAS,GAAGR,WAAW,CAAC;EAC1BS,IAAI,EAAE,MAAM;EACZR,YAAY;EACZS,QAAQ,EAAE;IACNC,SAASA,CAACC,KAAK,EAAEC,MAAM,EAAC;MACpB,MAAM;QAACC,SAAS;QAAEC;MAAQ,CAAC,GAAGF,MAAM,CAACG,OAAO;MAC5C,MAAMC,cAAc,GAAIL,KAAK,CAACV,KAAK,CAAEgB,SAAS,CAACC,IAAI,IAAIA,IAAI,CAACL,SAAS,KAAKA,SAAS,CAAC;MACpF,IAAGG,cAAc,IAAI,CAAC,EAAC;QACnBL,KAAK,CAACV,KAAK,CAACe,cAAc,CAAC,CAACF,QAAQ,IAAIA,QAAQ;MACpD,CAAC,MAAI;QACDH,KAAK,CAACV,KAAK,CAACkB,IAAI,CAAC;UAACN,SAAS;UAAEC;QAAQ,CAAC,CAAC;MAC3C;MACAZ,YAAY,CAACkB,OAAO,CAAC,OAAO,EAAEhB,IAAI,CAACiB,SAAS,CAACV,KAAK,CAACV,KAAK,CAAC,CAAC;IAE9D,CAAC;IACDqB,cAAcA,CAACX,KAAK,EAAEC,MAAM,EAAC;MACzB,MAAM;QAACC,SAAS;QAAEC;MAAQ,CAAC,GAAGF,MAAM,CAACG,OAAO;MAC5C,MAAMC,cAAc,GAAIL,KAAK,CAACV,KAAK,CAAEgB,SAAS,CAACC,IAAI,IAAIA,IAAI,CAACL,SAAS,KAAKA,SAAS,CAAC;MAEpF,IAAGC,QAAQ,GAAG,CAAC,EAAC;QACZH,KAAK,CAACV,KAAK,CAACe,cAAc,CAAC,CAACF,QAAQ,GAAGA,QAAQ;MACnD,CAAC,MAAI;QACDH,KAAK,CAACV,KAAK,GAAIU,KAAK,CAACV,KAAK,CAAEsB,MAAM,CAACL,IAAI,IAAIA,IAAI,CAACL,SAAS,KAAKA,SAAS,CAAC;MAC5E;MACAX,YAAY,CAACkB,OAAO,CAAC,OAAO,EAAEhB,IAAI,CAACiB,SAAS,CAACV,KAAK,CAACV,KAAK,CAAC,CAAC;IAC9D,CAAC;IACDuB,WAAWA,CAACb,KAAK,EAAEC,MAAM,EAAC;MACtB,MAAMa,QAAQ,GAAGb,MAAM,CAACG,OAAO;MAC/B,IAAIC,cAAc;MAClB,IAAIU,QAAQ,GAAG,CAAC;MAChB,KAAK,MAAMC,OAAO,IAAIF,QAAQ,EAAC;QAC3BT,cAAc,GAAIL,KAAK,CAACV,KAAK,CAAEgB,SAAS,CAACC,IAAI,IAAIA,IAAI,CAACL,SAAS,KAAKc,OAAO,CAACC,EAAE,CAAC;QAC/EF,QAAQ,IAAIC,OAAO,CAACE,KAAK,GAAClB,KAAK,CAACV,KAAK,CAACe,cAAc,CAAC,CAACF,QAAQ;MAClE;MACAgB,OAAO,CAACC,GAAG,CAACL,QAAQ,CAAC;MACrB,OAAOA,QAAQ;IACnB;EACJ;AACJ,CAAC,CAAC;AACF,OAAO,MAAM;EAAEhB,SAAS;EAAEY;AAAe,CAAC,GAAGf,SAAS,CAACyB,OAAO;AAC9D,eAAezB,SAAS,CAAC0B,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}